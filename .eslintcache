[{"/Users/dannylin/Documents/Projects/nutrition-tracker/src/index.js":"1","/Users/dannylin/Documents/Projects/nutrition-tracker/src/App.js":"2","/Users/dannylin/Documents/Projects/nutrition-tracker/src/fire.js":"3","/Users/dannylin/Documents/Projects/nutrition-tracker/src/components/Dashboard.js":"4","/Users/dannylin/Documents/Projects/nutrition-tracker/src/components/Login.js":"5","/Users/dannylin/Documents/Projects/nutrition-tracker/src/components/Nutrition.js":"6","/Users/dannylin/Documents/Projects/nutrition-tracker/src/components/Autocomplete.js":"7","/Users/dannylin/Documents/Projects/nutrition-tracker/src/components/Fontawesomeicon.js":"8"},{"size":196,"mtime":1607321533616,"results":"9","hashOfConfig":"10"},{"size":3159,"mtime":1620401317388,"results":"11","hashOfConfig":"10"},{"size":611,"mtime":1620400631286,"results":"12","hashOfConfig":"10"},{"size":1872,"mtime":1620414213612,"results":"13","hashOfConfig":"10"},{"size":2479,"mtime":1620401327455,"results":"14","hashOfConfig":"10"},{"size":13154,"mtime":1620413839015,"results":"15","hashOfConfig":"10"},{"size":4300,"mtime":1620400170018,"results":"16","hashOfConfig":"10"},{"size":411,"mtime":1620401420708,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"7dazu8",{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/dannylin/Documents/Projects/nutrition-tracker/src/index.js",[],["37","38"],"/Users/dannylin/Documents/Projects/nutrition-tracker/src/App.js",["39","40","41","42"],"import './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport fire from './fire';\nimport Login from './components/Login'\nimport Dashboard from './components/Dashboard';\nconst axios = require('axios').default;\n\nfunction App() {\n\n    const [user, setUser] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [emailError, setEmailError] = useState(\"\");\n    const [passwordError, setPasswordError] = useState(\"\");\n    const [hasAccount, setHasAccount] = useState(false);\n\n    const clearInputs = () => {\n        setEmail(\"\");\n        setPassword(\"\");\n    }\n\n    const clearErrors = () => {\n        setEmailError(\"\");\n        setPasswordError(\"\");\n    }\n\n    const handleLogin = () => {\n        clearErrors();\n        fire\n            .auth()\n            .signInWithEmailAndPassword(email, password)\n            .catch(err => {\n                switch (err.code) {\n                    case \"auth/invalid-email\":\n                    case \"auth/user-disabled\":\n                    case \"auth/user-not-found\":\n                        setEmailError(err.message);\n                        break;\n                    case \"auth/wrong-password\":\n                        setPasswordError(err.message);\n                        break;\n                }\n            });\n    }\n\n    const handleSignup = () => {\n        clearErrors();\n        fire\n            .auth()\n            .createUserWithEmailAndPassword(email, password)\n            .catch(err => {\n                switch (err.code) {\n                    case \"auth/email-already-in-use\":\n                    case \"auth/invalid-email\":\n                        setEmailError(err.message);\n                        break;\n                    case \"auth/weak-password\":\n                        setPasswordError(err.message);\n                        break;\n                }\n            });\n    }\n\n    const handleLogout = () => {\n        fire.auth().signOut();\n    }\n\n    const authListener = () => {\n        fire.auth().onAuthStateChanged(user => {\n            if (user) {\n                clearInputs();\n                setUser(user);\n            } else {\n                setUser(\"\");\n            }\n        });\n    } \n\n    useEffect(() => {\n        authListener();\n    }, []);\n\n    return (\n        <div>\n            {user ? (\n                <Dashboard \n                    handleLogout = {handleLogout} \n                    user = {user}\n                />\n            ) : (\n                <Login \n                    email = {email}\n                    setEmail = {setEmail}\n                    password = {password}\n                    setPassword = {setPassword}\n                    handleLogin = {handleLogin}\n                    handleSignup = {handleSignup}\n                    hasAccount = {hasAccount}\n                    setHasAccount = {setHasAccount}\n                    emailError = {emailError}\n                    passwordError = {passwordError}\n                    clearErrors = {clearErrors}\n                    clearInputs = {clearInputs}\n                />\n            )}\n        </div>\n    ); \n}\n\nexport default App;\n","/Users/dannylin/Documents/Projects/nutrition-tracker/src/fire.js",[],"/Users/dannylin/Documents/Projects/nutrition-tracker/src/components/Dashboard.js",[],"/Users/dannylin/Documents/Projects/nutrition-tracker/src/components/Login.js",[],"/Users/dannylin/Documents/Projects/nutrition-tracker/src/components/Nutrition.js",["43","44"],"import React, { useState, useEffect } from \"react\";\nimport \"./Fontawesomeicon.js\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport '../styles/Nutrition.css'\nimport Autocomplete from \"./Autocomplete.js\";\nconst axios = require('axios').default;\nconst QuickChart = require('quickchart-js');\n\nfunction Nutrition(props) {\n\n    const {\n        totalCal,\n        totalCarb,\n        totalProtein,\n        totalFat,\n        setTotalCal,\n        setTotalCarb,\n        setTotalProtein,\n        setTotalFat\n    } = props;\n\n    const APP_ID = \"cb858920\";\n    const APP_KEY = \"23e79631876defaed65d9e35dd579c67\";\n\n    const [food, setFood] = useState(\"\");\n    const [quantity, setQuantity] = useState(\"\");\n    const [error, setError] = useState(false);\n    const [badSearch, setBadSearch] = useState(false);\n\n    const [name, setName] = useState(\"\");\n    const [calories, setCalories] = useState(0);\n    const [carbs, setCarbs] = useState(0);\n    const [protein, setProtein] = useState(0);\n    const [fat, setFat] = useState(0);\n\n    const [chart, setChart] = useState([]);\n    const [tempChart, setTempChart] = useState([]);\n\n    const [foodList, setFoodList] = useState([]);\n\n    // Uses Edamam's api to get nutrition data\n    const getNutrition = async () => {\n        if (food === \"\" || quantity === \"\") {\n            setBadSearch(false);\n            setError(true);\n            return;\n        }\n\n        var url = \"https://api.edamam.com/api/nutrition-data?app_id=\" + APP_ID + \"&app_key=\" + APP_KEY + \"&ingr=\" + \"1%20\" + quantity + \"%20\" + food;\n\n        try {\n            return await axios.get(url).then(res => {\n                if (res.data.calories === 0 && res.data.totalWeight === 0) {\n                    clear();\n                    setError(false);\n                    setBadSearch(true);\n                    return;\n                }\n                setCalories(res.data.calories);\n                setCarbs(parseFloat(res.data.totalNutrients.CHOCDF.quantity.toFixed(2)));\n                setProtein(parseFloat(res.data.totalNutrients.PROCNT.quantity.toFixed(2)));\n                setFat(parseFloat(res.data.totalNutrients.FAT.quantity.toFixed(2)));\n                setName(food);\n                clear();\n                setError(false);\n                setBadSearch(false);\n\n                // generate chart\n                getTempChart(\n                    res.data.calories, \n                    res.data.totalNutrients.CHOCDF.quantity.toFixed(2), \n                    res.data.totalNutrients.PROCNT.quantity.toFixed(2), \n                    res.data.totalNutrients.FAT.quantity.toFixed(2)\n                );\n            });\n        } catch (error) {\n            //console.error(error);\n            clear();\n            setBadSearch(true);\n        }\n    }\n\n    const clear = () => {\n        setFood(\"\");\n        setQuantity(\"\");\n    }\n\n    \n    const updateIntake = () => {\n        getChart(calories + totalCal, carbs + totalCarb, protein + totalProtein, fat + totalFat);\n        setTotalCal(calories + totalCal);\n        setTotalCarb(carbs + totalCarb);\n        setTotalProtein(protein + totalProtein);\n        setTotalFat(fat + totalFat);\n        \n        setFoodList(\n            foodList.concat(  \n                <div key={foodList.length} className=\"botSpacing\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <th>{tableTitle()}</th>\n                            </tr>\n                            <tr>\n                                <td>Calories:<label className=\"quantity\">{calories}</label></td>\n                            </tr>\n                            <tr>\n                                <td>Carbs:<label className=\"quantity\">{carbs}</label></td>\n                            </tr>\n                            <tr>\n                                <td>Protein:<label className=\"quantity\">{protein}</label></td>\n                            </tr>\n                            <tr>\n                                <td>Fat:<label className=\"quantity\">{fat}</label></td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            )\n        );\n    }\n\n    // Uses quick chart api to get pie chart\n    const getChart = async (tCal, tc, tp, tf) => {\n\n        // This will be the default chart data if user has not tracked any nutrition intake\n        let percentCarb = 33.3;\n        let percentProtein = 33.3;\n        let percentFat = 33.3;\n\n        // cant divide by 0\n        if (tCal !== 0) {\n            percentCarb = ((tc * 4 * 100)/tCal).toFixed(2);\n            percentProtein = ((tp * 4 * 100)/tCal).toFixed(2);\n            percentFat = ((tf * 9 * 100)/tCal).toFixed(2);\n        }\n\n        \n        const myChart = new QuickChart();\n        myChart\n        .setConfig(\n            {\n                type: 'doughnut',\n                data: {\n                datasets: [\n                    {\n                    data: [percentCarb, percentProtein, percentFat],\n                    backgroundColor: ['rgb(255, 159, 64)', 'rgb(247, 126, 126)', 'rgb(255, 205, 86)'],\n                    },\n                ],\n                labels: ['Carbs', 'Protein', 'Fat'],\n                },\n                options: {\n                    plugins: {\n                        datalabels: {\n                            display: true,\n                            font: {\n                                weight: 'bold',\n                                size: 16,\n                            },\n                            formatter: (value) => {\n                                return value + '%';\n                            }\n                        },\n                        doughnutlabel: {\n                            labels: [{\n                                text: tCal,\n                                font: {\n                                    size: 30,\n                                    weight: 'bold'\n                                }\n                            }, {\n                                text: 'Total Calories'\n                            }]\n                        }\n                    }\n                }\n            }\n        )\n        .setWidth(300)\n        .setHeight(300)\n        .setBackgroundColor('transparent');\n  \n        setChart(<img src={myChart.getUrl()} alt=\"Chart\" style={{width: \"350px\", height:\"350px\"}}></img>);\n    }\n\n    // reset total intake to 0\n    const resetIntake = () => {\n\n        getChart(0, 0, 0, 0);\n        setTotalCal(0);\n        setTotalCarb(0);\n        setTotalProtein(0);\n        setTotalFat(0);\n        \n    }\n\n    const tableTitle = () => {\n        if (name === \"\") {\n            return \"Item\";\n        } else {\n            return name;\n        }\n    }\n\n    // makes chart based on the current food search\n    const getTempChart = async (tCal, tc, tp, tf) => {\n\n        // This will be the default chart data if user has not tracked any nutrition intake\n        let percentCarb = 33.3;\n        let percentProtein = 33.3;\n        let percentFat = 33.3;\n\n        // cant divide by 0\n        if (tCal !== 0) {\n            percentCarb = ((tc * 4 * 100)/tCal).toFixed(2);\n            percentProtein = ((tp * 4 * 100)/tCal).toFixed(2);\n            percentFat = ((tf * 9 * 100)/tCal).toFixed(2);\n        }\n\n        \n        const myChart = new QuickChart();\n        myChart\n        .setConfig(\n            {\n                type: 'doughnut',\n                data: {\n                datasets: [\n                    {\n                    data: [percentCarb, percentProtein, percentFat],\n                    backgroundColor: ['rgb(255, 159, 64)', 'rgb(247, 126, 126)', 'rgb(255, 205, 86)'],\n                    },\n                ],\n                labels: ['Carbs', 'Protein', 'Fat'],\n                },\n                options: {\n                    plugins: {\n                        datalabels: {\n                            display: true,\n                            font: {\n                                weight: 'bold',\n                                size: 16,\n                            },\n                            formatter: (value) => {\n                                return value + '%';\n                            }\n                        },\n                        doughnutlabel: {\n                            labels: [{\n                                text: tCal,\n                                font: {\n                                    size: 30,\n                                    weight: 'bold'\n                                }\n                            }, {\n                                text: 'Total Calories'\n                            }]\n                        }\n                    }\n                }\n            }\n        )\n        .setWidth(300)\n        .setHeight(300)\n        .setBackgroundColor('transparent');\n  \n        setTempChart(<img src={myChart.getUrl()} alt=\"Chart\" style={{width: \"350px\", height:\"350px\"}}></img>);\n    }\n\n    useEffect(() => {\n        // if nutrition intakes are null or zero, then the chart will be generated with 0 total calories\n        if (totalCal === null || (totalCal === 0 && totalCarb === 0 && totalProtein === 0 && totalFat === 0)) {\n            getChart(0, 0, 0, 0);\n        } else {\n            getChart(totalCal, totalCarb, totalProtein, totalFat);\n        }\n    }, []);\n\n    return (\n        <div className=\"horzDisplay\">\n            <div className=\"section\">\n                <div className=\"horz\">\n                    <div className=\"apiForm\">\n                        <div>\n                            <label>Food</label>\n                            <input className=\"inputStyle\" value={food} type=\"text\" placeholder=\"ex: cheesecake\" onChange={e => {setFood(e.target.value)}}></input>\n                        </div>\n                        \n                        <div>\n                            <label>Quantity</label>\n                            <Autocomplete \n                                suggestions={[\"small\", \"medium\", \"large\", \"cup\", \"pint\", \"quart\", \"gallon\", \"teaspoon\", \"tablespoon\", \"liter\"]} \n                                quantity={quantity} \n                                setQuantity={setQuantity}\n                            />\n                        </div>\n\n                        {error && <p className=\"error\">need to fill out both fields</p>}\n                        {badSearch && <p className=\"error\">could not find nutrition data</p>}\n\n                        <div className=\"labelAndIcon\">\n                            <div className=\"searchLabel\">\n                                <label>Search</label>\n                            </div>\n                            <FontAwesomeIcon icon=\"search-plus\" size=\"2x\" className=\"searchIcon\" onClick={e => {e.preventDefault(); getNutrition()}} />\n                        </div>\n                    </div>\n\n                    <div>\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <th>{tableTitle()}</th>\n                                </tr>\n                                <tr>\n                                    <td>Calories:<label className=\"quantity\">{calories}</label></td>\n                                </tr>\n                                <tr>\n                                    <td>Carbs:<label className=\"quantity\">{carbs}</label></td>\n                                </tr>\n                                <tr>\n                                    <td>Protein:<label className=\"quantity\">{protein}</label></td>\n                                </tr>\n                                <tr>\n                                    <td>Fat:<label className=\"quantity\">{fat}</label></td>\n                                </tr>\n                            </tbody>\n                        </table>\n\n                        <div className=\"track\">\n                        <button className=\"trackBtn\" onClick={e => {e.preventDefault(); updateIntake();}}>Track Nutrition</button>\n                        </div>\n                    </div>\n                </div>\n\n                <h2 className=\"chartTitle\">Source of Calories</h2>\n                {tempChart}\n\n            </div>\n\n            \n\n\n            <div className=\"section\">\n                <div className=\"sec\">\n                    <div className=\"titleAndReset\">\n                        <div>\n                            <h2 className=\"chartTitle\">Total Nutriton Intake</h2>\n                        </div>\n                    </div>\n\n                    \n                    <div>\n                    {chart}\n                            <button className=\"roundedBtn\" onClick={e => {e.preventDefault(); resetIntake();}}>Reset</button>\n                    </div>\n\n\n                    <div className=\"panel\">\n                        <h2 className=\"listTitle\">Food List</h2>\n                        <div className=\"scroll\">\n                            {foodList}\n                        </div>\n                    </div>\n                </div>\n\n\n            </div>\n\n        </div>\n    );\n}\n\nexport default Nutrition;","/Users/dannylin/Documents/Projects/nutrition-tracker/src/components/Autocomplete.js",[],"/Users/dannylin/Documents/Projects/nutrition-tracker/src/components/Fontawesomeicon.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":6,"column":7,"nodeType":"51","messageId":"52","endLine":6,"endColumn":12},{"ruleId":"53","severity":1,"message":"54","line":33,"column":17,"nodeType":"55","messageId":"56","endLine":42,"endColumn":18},{"ruleId":"53","severity":1,"message":"54","line":52,"column":17,"nodeType":"55","messageId":"56","endLine":60,"endColumn":18},{"ruleId":"57","severity":1,"message":"58","line":81,"column":8,"nodeType":"59","endLine":81,"endColumn":10,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":49,"column":115,"nodeType":"63","messageId":"64","endLine":49,"endColumn":116},{"ruleId":"57","severity":1,"message":"65","line":277,"column":8,"nodeType":"59","endLine":277,"endColumn":10,"suggestions":"66"},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'axios' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'authListener'. Either include it or remove the dependency array.","ArrayExpression",["69"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has missing dependencies: 'totalCal', 'totalCarb', 'totalFat', and 'totalProtein'. Either include them or remove the dependency array.",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [authListener]",{"range":"75","text":"76"},"Update the dependencies array to be: [totalCal, totalCarb, totalFat, totalProtein]",{"range":"77","text":"78"},[2292,2294],"[authListener]",[9379,9381],"[totalCal, totalCarb, totalFat, totalProtein]"]